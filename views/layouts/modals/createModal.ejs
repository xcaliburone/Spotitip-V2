<div id="createModal" class="modal">

    <div class="modal-content">
        <div class="flex flex-row justify-between">
            <h1 class="font-bold text-2xl mb-4 text-neutral-300">Create <%= modalName %></h1>
            <span class="close">
                <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="40" height="40" viewBox="0,0,256,256">
                    <g fill="#ffffff" fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal"><g transform="scale(8.53333,8.53333)"><path d="M7,4c-0.25587,0 -0.51203,0.09747 -0.70703,0.29297l-2,2c-0.391,0.391 -0.391,1.02406 0,1.41406l7.29297,7.29297l-7.29297,7.29297c-0.391,0.391 -0.391,1.02406 0,1.41406l2,2c0.391,0.391 1.02406,0.391 1.41406,0l7.29297,-7.29297l7.29297,7.29297c0.39,0.391 1.02406,0.391 1.41406,0l2,-2c0.391,-0.391 0.391,-1.02406 0,-1.41406l-7.29297,-7.29297l7.29297,-7.29297c0.391,-0.39 0.391,-1.02406 0,-1.41406l-2,-2c-0.391,-0.391 -1.02406,-0.391 -1.41406,0l-7.29297,7.29297l-7.29297,-7.29297c-0.1955,-0.1955 -0.45116,-0.29297 -0.70703,-0.29297z"></path></g></g>
                </svg>
            </span>
        </div>
        <form id="<%= modalForm %>">
            <div class="mb-4">
                <label for="<%= foridnameTitleModal %>" class="block text-sm font-medium text-grey-700 dark:text-neutral-300 mb-2">Title : </label>
                <input type="text" id="<%= foridnameTitleModal %>" class="shadow-sm rounded-md w-full px-3 py-2 border-2 border-neutral-300 focus:outline-none focus:ring-spotitip focus:border-spotitip" placeholder="<%= modalPlaceholderTitle %>" required name="<%= foridnameTitleModal %>">
            </div>

            <div class="mb-4">
                <label for="<%= foridnameDescModal %>" class="block text-sm font-medium text-grey-700 dark:text-neutral-300 mb-2">Description : </label>
                <input type="text" id="<%= foridnameDescModal %>" class="shadow-sm rounded-md w-full px-3 py-2 border-2 border-neutral-300 focus:outline-none focus:ring-spotitip focus:border-spotitip" placeholder="<%= modalPlaceholderDesc %>" name="<%= foridnameDescModal %>">
            </div>
            
            <button type="submit" class="<%= classModalButton %> w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-emerald-600 hover:bg-spotitip hover:text-black close"><%= modalButton %></button>
        </form>
    </div>
      
</div>

<script>
    document.getElementById("createPlaylistForm").addEventListener("submit", async (event) => {
        event.preventDefault();
        const name = document.getElementById("playlistName").value;
        const description = document.getElementById("playlistDescription").value;
        const userId = '<%= userId %>'

        try {
            const response = await fetch(`/createPlaylist?userId=${userId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, description })
            });

            if (response.ok) { closeModal();
            } else { console.error("Error creating playlist:", error); }
        } catch (error) { console.error("Error creating playlist:", error); }
    });

    async function addPlaylistToUI(playlist) {
        const playlistContainer = document.querySelector(".list-items");
        
        try {
            const isDuplicate = await checkDuplicatePlaylist(playlist.name);
            
            if (isDuplicate) {
                alert("Playlist with this name already exists. Please choose a different name.");
                return res.redirect('/createPlaylist?error=duplicate');
            }

            const response = await fetch("/userPlaylists");
            if (!response.ok) { throw new Error("Failed to retrieve user playlists"); }
            const playlists = await response.json();

            playlists.forEach(playlist => {
                const playlistItem = document.createElement("div");
                playlistItem.classList.add("item-playlist", "bg-neutral-800", "w-full", "h-[55px]", "list-none", "rounded-md", "overflow-hidden", "flex", "items-center", "hover:opacity-60", "transition", "hover:cursor-pointer");
                playlistItem.innerHTML = `
                    <img src="../images/liked.png" alt="liked songs" class="w-[55px]">
                    <p class="text-neutral-300 ml-3 font-medium">${playlist.name}</p>
                `;
                playlistContainer.appendChild(playlistItem);
            });
            return res.status(200).json({ message: 'Playlist created successfully.' });
        } catch (error) { console.error("Error adding playlist to UI:", error); }
    }
</script>

<script>
    document.getElementById("createAlbumForm").addEventListener("submit", async (event) => {
        event.preventDefault();
        const name = document.getElementById("albumName").value;
        const description = document.getElementById("albumDescription").value;
        const artistId = '<%= artistId %>'

        try {
            const response = await fetch(`/createAlbum?artistId=${artistId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name, description })
            });

            if (response.ok) {
                const message = await response.text();
                alert(message);
                closeModal();
            } else { console.error("Error creating album:", response.statusText); }
        } catch (error) {
            console.error("Error creating album:", error);
        }
    });
</script>